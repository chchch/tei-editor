<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
                xmlns:x="http://www.tei-c.org/ns/1.0"
                exclude-result-prefixes="x">
<xsl:output method="html" omit-xml-declaration="yes"/>

<xsl:template match="x:pb">
    <xsl:element name="span">
        <xsl:attribute name="title">page break</xsl:attribute>
        <xsl:attribute name="class">pb</xsl:attribute>
        <xsl:attribute name="lang">en</xsl:attribute>
        <xsl:value-of select="@n"/>
    </xsl:element>
</xsl:template>

<!--xsl:template match="x:pb">
    <xsl:element name="hr">
        <xsl:attribute name="data-n"><xsl:value-of select="@n"/></xsl:attribute>
    </xsl:element>
    <xsl:element name="img">
        <xsl:attribute name="class">editbutton</xsl:attribute>
        <xsl:attribute name="data-n"><xsl:value-of select="@n"/></xsl:attribute>
        <xsl:attribute name="src">edit_icon.svg</xsl:attribute>
    </xsl:element>
    <h3 class="pb"><xsl:value-of select="@n"/></h3>
</xsl:template-->

<xsl:template match="x:lb">
    <xsl:element name="span">
        <xsl:attribute name="class">lb-minimal</xsl:attribute>
        <xsl:attribute name="title"><xsl:text>line </xsl:text><xsl:value-of select="@n"/></xsl:attribute>
        <xsl:attribute name="lang">en</xsl:attribute>
        <xsl:text>â¸¤</xsl:text>
    </xsl:element>
</xsl:template>

<!--xsl:template name="test-left-right">
    <xsl:param name="pText" select="@place"/>
    <xsl:if test="string-length($pText)">
        <xsl:variable name="field" value="substring-before(
            concat($pText,' '),
            ' ')"/>
        <xsl:choose>
            <xsl:when test="$field = 'left'">
                <xsl:text>left</xsl:text>
            </xsl:when>
            <xsl:when test="$field = 'right'">
                <xsl:text>right</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="test-left-right">
                    <xsl:with-param name="pText" select="substring-after($pText,' ')"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:if>
</xsl:template-->

<xsl:template match="x:fw">
<xsl:if test="normalize-space(.) != ''">
    <xsl:element name="div">
        <xsl:attribute name="class">
            <xsl:text>fw </xsl:text>
            <!--xsl:call-template name="test-left-right"/-->
            <xsl:choose>
                <xsl:when test="contains(@place,'right')">
                    <xsl:text>right</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>left</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:attribute>
        <xsl:attribute name="title">
            <xsl:value-of select="@type"/>
            <xsl:text>, </xsl:text>
            <xsl:value-of select="@place"/>
        </xsl:attribute>
        <xsl:apply-templates/>
    </xsl:element>
</xsl:if>
</xsl:template>

<xsl:template match="x:div[@type='story']">
    <hr class="story" />
    <h3 class="story" lang="en">story no. <xsl:value-of select="@num"/>, <xsl:value-of select="@city"/>, <xsl:value-of select="@king"/></h3>
    <div class="story">
        <xsl:element name="img">
            <xsl:attribute name="class">editbutton offsetx offsety</xsl:attribute>
            <xsl:attribute name="src">edit_icon.svg</xsl:attribute>
        </xsl:element>
        <xsl:apply-templates/>
    </div>
</xsl:template>

<xsl:template match="x:div[@type='verse']">
    <div class="verse">    
        <xsl:element name="img">
            <xsl:attribute name="class">editbutton offsetx</xsl:attribute>
            <xsl:attribute name="src">edit_icon.svg</xsl:attribute>
        </xsl:element>
        <xsl:apply-templates />
    </div>
</xsl:template>

<xsl:template match="x:div[@type='para']">
    <div class="para">    
        <xsl:element name="img">
            <xsl:attribute name="class">editbutton offsetx</xsl:attribute>
            <xsl:attribute name="src">edit_icon.svg</xsl:attribute>
        </xsl:element>
        <xsl:apply-templates />
    </div>
</xsl:template>

<xsl:template match="x:del">
    <xsl:variable name="rend" select="@rend"/>
    <xsl:element name="del">
        <xsl:attribute name="title">
            <xsl:text>deleted</xsl:text>
            <xsl:if test="string($rend)">
                <xsl:text> (</xsl:text>
                <xsl:value-of select="$rend"/>
                <xsl:text>)</xsl:text>
           </xsl:if>
        </xsl:attribute>
        <xsl:apply-templates/>
    </xsl:element>
</xsl:template>

<xsl:template match="x:add">
    <xsl:variable name="place" select="@place"/>
    <xsl:variable name="rend" select="@rend"/>
    <xsl:element name="ins">
        <xsl:attribute name="title">
            <xsl:text>added</xsl:text>
            <xsl:if test="string($rend) or string($place)">
                <xsl:text> (</xsl:text>
                <xsl:value-of select="$rend"/>
                <xsl:if test="string($rend) and string($place)">
                    <xsl:text>, </xsl:text>
                </xsl:if>
                <xsl:value-of select="$place"/>
                <xsl:text>)</xsl:text>
            </xsl:if>
        </xsl:attribute>
        <xsl:apply-templates/>
    </xsl:element>
</xsl:template>

<xsl:template match="x:subst">
    <span class="subst"><xsl:apply-templates /></span>
</xsl:template>

<xsl:template match="x:g">
    <xsl:element name="span">
        <xsl:attribute name="title"><xsl:value-of select="@rend"/></xsl:attribute>
        <xsl:attribute name="class">gaiji</xsl:attribute>
        <xsl:apply-templates/>
    </xsl:element>
</xsl:template>
</xsl:stylesheet>
